#ifndef MATRIX_SETTINGS_H /* GUARD __MATRIX_SETTINGS_H */
#define MATRIX_SETTINGS_H

#define MAX_POINTS 64
#define scrollTextLen 88 U
#define uint8 uint8_t
#define bool uint8

#define ROW_1 2
#define ROW_2 3
#define ROW_3 4
#define ROW_4 5
#define ROW_5 6
#define ROW_6 7
#define ROW_7 8
#define ROW_8 9

#define COL_1 12
#define COL_2 11
#define COL_3 A5
#define COL_4 A4
#define COL_5 A3
#define COL_6 A2
#define COL_7 A1
#define COL_8 A0

const byte rows[] = {
  ROW_1,
  ROW_2,
  ROW_3,
  ROW_4,
  ROW_5,
  ROW_6,
  ROW_7,
  ROW_8
};
const byte cols[] = {
  COL_1,
  COL_2,
  COL_3,
  COL_4,
  COL_5,
  COL_6,
  COL_7,
  COL_8
};

/* The display buffers */
byte ALL[] = {
  B11111111,
  B11111111,
  B11111111,
  B11111111,
  B11111111,
  B11111111,
  B11111111,
  B11111111
};
byte EX[] = {
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
};
byte A[] = {
  B00000000,
  B00111100,
  B01100110,
  B01100110,
  B01111110,
  B01100110,
  B01100110,
  B01100110
};
byte B[] = {
  B01111000,
  B01001000,
  B01001000,
  B01110000,
  B01001000,
  B01000100,
  B01000100,
  B01111100
};
byte C[] = {
  B00000000,
  B00011110,
  B00100000,
  B01000000,
  B01000000,
  B01000000,
  B00100000,
  B00011110
};
byte D[] = {
  B00000000,
  B00111000,
  B00100100,
  B00100010,
  B00100010,
  B00100100,
  B00111000,
  B00000000
};
byte E[] = {
  B00000000,
  B00111100,
  B00100000,
  B00111000,
  B00100000,
  B00100000,
  B00111100,
  B00000000
};
byte F[] = {
  B00000000,
  B00111100,
  B00100000,
  B00111000,
  B00100000,
  B00100000,
  B00100000,
  B00000000
};
byte G[] = {
  B00000000,
  B00111110,
  B00100000,
  B00100000,
  B00101110,
  B00100010,
  B00111110,
  B00000000
};
byte H[] = {
  B00000000,
  B00100100,
  B00100100,
  B00111100,
  B00100100,
  B00100100,
  B00100100,
  B00000000
};
byte I[] = {
  B10000000,
  B00111000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00111000,
  B00000000
};
byte J[] = {
  B00000000,
  B00011100,
  B00001000,
  B00001000,
  B00001000,
  B00101000,
  B00111000,
  B00000000
};
byte K[] = {
  B00000000,
  B00100100,
  B00101000,
  B00110000,
  B00101000,
  B00100100,
  B00100100,
  B00000000
};
byte L[] = {
  B00000000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00100000,
  B00111100,
  B00000000
};
byte M[] = {
  B00000000,
  B00000000,
  B01000100,
  B10101010,
  B10010010,
  B10000010,
  B10000010,
  B00000000
};
byte N[] = {
  B00000000,
  B00100010,
  B00110010,
  B00101010,
  B00100110,
  B00100010,
  B00000000,
  B00000000
};
byte O[] = {
  B00000000,
  B00111100,
  B01000010,
  B01000010,
  B01000010,
  B01000010,
  B00111100,
  B00000000
};
byte P[] = {
  B00000000,
  B00111000,
  B00100100,
  B00100100,
  B00111000,
  B00100000,
  B00100000,
  B00000000
};
byte Q[] = {
  B00000000,
  B00111100,
  B01000010,
  B01000010,
  B01000010,
  B01000110,
  B00111110,
  B00000001
};
byte R[] = {
  B00000000,
  B00111000,
  B00100100,
  B00100100,
  B00111000,
  B00100100,
  B00100100,
  B00000000
};
byte S[] = {
  B00000000,
  B00111100,
  B00100000,
  B00111100,
  B00000100,
  B00000100,
  B00111100,
  B00000000
};
byte T[] = {
  B00000000,
  B01111100,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00000000
};
byte U[] = {
  B00000000,
  B01000010,
  B01000010,
  B01000010,
  B01000010,
  B00100100,
  B00011000,
  B00000000
};
byte V[] = {
  B00000000,
  B00100010,
  B00100010,
  B00100010,
  B00010100,
  B00010100,
  B00001000,
  B00000000
};
byte W[] = {
  B00000000,
  B10000010,
  B10010010,
  B01010100,
  B01010100,
  B00101000,
  B00000000,
  B00000000
};
byte X[] = {
  B00000000,
  B01000010,
  B00100100,
  B00011000,
  B00011000,
  B00100100,
  B01000010,
  B00000000
};
byte Y[] = {
  B00000000,
  B01000100,
  B00101000,
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00000000
};
byte Z[] = {
  B00000000,
  B00111100,
  B00000100,
  B00001000,
  B00010000,
  B00100000,
  B00111100,
  B00000000
};

byte Idle_Image[88] = {
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000, //Space
  
  B00000000,
  B00000000,
  B01000100,
  B01101100,
  B01010100,
  B01000100,
  B01000100,
  B00000000, //M
  
  B00000000,
  B00000000,
  B00111000,
  B00100000,
  B00111000,
  B00100000,
  B00111000,
  B00000000, //E
  
  B00000000,
  B00000000,
  B01000100,
  B01101100,
  B01010100,
  B01000100,
  B01000100,
  B00000000, //M
  
  B00000000,
  B00000000,
  B00111000,
  B00101000,
  B00101000,
  B00101000,
  B00111000,
  B00000000, //O
  
  B00000000,
  B00000000,
  B00111000,
  B00100100,
  B00111000,
  B00100100,
  B00100100,
  B00000000, //R
  
  B00000000,
  B00000000,
  B01000100,
  B00101000,
  B00010000,
  B00010000,
  B00010000,
  B00000000, //Y
  
  B00000000,
  B00000000,
  B00111000,
  B00100000,
  B00101100,
  B00100100,
  B00111100,
  B00000000, //G
  
  B00000000,
  B00000000,
  B01110000,
  B01010000,
  B01110000,
  B01010000,
  B01010000,
  B00000000, //A
  
  B00000000,
  B00000000,
  B01000100,
  B01101100,
  B01010100,
  B01000100,
  B01000100,
  B00000000, //M
  
  B00000000,
  B00000000,
  B00111000,
  B00100000,
  B00111000,
  B00100000,
  B00111000,
  B00000000 //E
};

/* State machine variables */
enum states {
  IDLE_STATE,
  COUNTDOWN_STATE,
  SHOWPATTERN_STATE,
  TRACKPATTERN_STATE,
  END_STATE
}
state;

/* Default left scrolling variables */
uint8_t showByte[8];
uint8_t maskNr = 0;
uint32_t currTime = 0;
uint32_t prevTime = 0;
uint8_t next_letter = 1;
int shift = 0;

/*@desc: 
   *  Set all pins as OUTPUT LOW
   *   We use just 
   *   A0 for LED input and 
   *   A1 for C/H reference voltage 
@param:
no param
@return:
void
*/
void initPins(void) {
  DDRB = 0xFF;
  DDRC = 0xFF;
  DDRD = 0xFF;
  PORTB = 0xFF;
  PORTC = 0xFF;
  PORTD = 0xFF;
}

#endif /* GUARD __MATRIX_SETTINGS_H */